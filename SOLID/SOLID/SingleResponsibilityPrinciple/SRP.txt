S -> Single Responsibility Principle

Uncle BOB:
	The best structure for a software system is heavily influenced by the social structure of the organization that uses it so that
	each software module has one, and only one, reason to change.

 - A module should have one, and only one, reason to change. -

Final version:
	- A module should be responsible to one, and only one, actor. -

 I ask myself:
	- Is this module responsible to do what this piece of code does?
		If the piece of performs a calculation. Is this class responsible to perform this calculation or should it depend to an other module which would be responsible for it?

	- Is this module responsible to know the information required to perform this task?
		If this module is responsible for a decision based on some information or state, then should this module generate this information or should the caller provide the information?

	- What is this module really responsible for?
		Look at the name that this module has

Resources